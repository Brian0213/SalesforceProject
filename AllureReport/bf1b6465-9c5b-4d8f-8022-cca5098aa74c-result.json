{"name": "test_salesCheck", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//label[@for='checkbox-1214']//span[@class='slds-checkbox_faux']\"}\n  (Session info: chrome=128.0.6613.114)\nStacktrace:\n\tGetHandleVerifier [0x010B8213+26163]\n\t(No symbol) [0x01049CC4]\n\t(No symbol) [0x00F424C3]\n\t(No symbol) [0x00F87453]\n\t(No symbol) [0x00F8762B]\n\t(No symbol) [0x00FC6B62]\n\t(No symbol) [0x00FAAD04]\n\t(No symbol) [0x00FC4661]\n\t(No symbol) [0x00FAAA56]\n\t(No symbol) [0x00F7BE89]\n\t(No symbol) [0x00F7C8CD]\n\tGetHandleVerifier [0x0138D313+2996019]\n\tGetHandleVerifier [0x013E1B89+3342249]\n\tGetHandleVerifier [0x01147AEF+614159]\n\tGetHandleVerifier [0x0114F17C+644508]\n\t(No symbol) [0x010527FD]\n\t(No symbol) [0x0104F6F8]\n\t(No symbol) [0x0104F895]\n\t(No symbol) [0x01041C16]\n\t(No symbol) [0x76B77BA9]\n\tRtlInitializeExceptionChain [0x77D3BDAB+107]\n\tRtlClearBits [0x77D3BD2F+191]", "trace": "self = <testCases.test_salesCheck.Test_SalesCheck object at 0x0000017256EEEE90>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"4a263915cff38fab0c1abd8c7e312538\")>\n\n    @pytest.mark.sales\n    def test_salesCheck(self, setup):\n        self.logger.info(\"*****Starting The Sales Opportunity Test*****\")\n        # Call the Browser Configuration\n        self.logger.info(\"*****Call the Browser Configuration*****\")\n        self.driver = setup\n        self.driver.implicitly_wait(10)\n        # Open the Website URL\n        self.logger.info(\"*****Open the Website URL*****\")\n        self.driver.get(self.baseURL)\n        # Fit the browser screen\n        self.logger.info(\"*****Fit the browser screen*****\")\n        self.driver.maximize_window()\n        # Define LoginPage Driver\n        self.logger.info(\"*****Define LoginPage Driver*****\")\n        self.lp = LoginPage(self.driver)\n        # Fill the UserName field\n        self.logger.info(\"*****Fill the UserName field*****\")\n        self.lp.setUserName(self.username)\n        # Fill the Password field\n        self.logger.info(\"*****Fill the Password field*****\")\n        self.lp.setPassword(self.password)\n        # Click on the Signin Button\n        self.logger.info(\"*****Click the Signin Button*****\")\n        self.lp.clickSignin()\n        time.sleep(7)\n    \n        self.qp = QuotePage(self.driver)\n        windowsIDs = self.driver.window_handles\n        parentwindowid = windowsIDs[0]\n        childwindowid = windowsIDs[1]\n        print(parentwindowid, childwindowid)\n        # Click the Opportunity Tab\n        self.qp.clickCpqQuoteTab()\n        time.sleep(3)\n        # Click on an Opportunity ID\n        self.qp.SalesQuote1()\n        time.sleep(3)\n        self.driver.execute_script(\"window.scrollBy(0, 150)\")\n        time.sleep(3)\n        # Opportunity Assertions\n        # stage = self.driver.find_element(By.XPATH, \"//span[@class='test-id__field-value slds-form-element__static slds-grow word-break-ie11']\").text\n        # assert stage == \"Closed Won Pending\", \"Stage Is Not Correct\"\n        # assert \"Closed Won Pending\" in stage, \"Stage is Incorrect\"\n        # assert \"Closed Won Pending\" == \"Closed Won Pending\"\n        # order = self.driver.find_element(By.XPATH, \"//span[normalize-space()='Service - Commercial']\").text\n        # assert order == \"Service - Commercial\", \"Order Type Is Not Correct\"\n        # assert \"Service - Commercial\" in order, \"Order Type is Incorrect\"\n        # assert \"Service - Commercial\" == \"Service - Commercial\"\n        # orderS = self.driver.find_element(By.XPATH, \"//span[normalize-space()='Repair']\").text\n        # assert orderS == \"Repair\", \"OrderS Is Not Correct\"\n        # assert \"Repair\" in orderS, \"Order Type is Incorrect\"\n        # assert \"Repair\" == \"Repair\"\n        # OpportunityR = self.driver.find_element(By.XPATH, \"//span[normalize-space()='Miner Sales Opportunity']\").text\n        # assert OpportunityR == \"Miner Sales Opportunity\", \"OpportunityR Is Not Correct\"\n        # assert \"Miner Sales Opportunity\" in OpportunityR, \"OpportunityR is Incorrect\"\n        # assert \"Miner Sales Opportunity\" == \"Miner Sales Opportunity\"\n        # Quote Assertions\n        OpportunityQ = self.driver.find_element(By.XPATH, \"//slot[contains(text(),'MINOPPORTUNE0819-')]\").text\n        assert OpportunityQ == \"MINOPPORTUNE0819-\", \"MINOPPORTUNE0819- Is Not Correct\"\n        assert \"MINOPPORTUNE0819-\" in OpportunityQ, \"MINOPPORTUNE0819- is Incorrect\"\n        assert \"MINOPPORTUNE0819-\" == \"MINOPPORTUNE0819-\"\n        PayingP = self.driver.find_element(By.XPATH, \"//slot[contains(text(),'Georgia Aquarium, INC.')]\").text\n        assert PayingP == \"Georgia Aquarium, INC.\", \"Georgia Aquarium, INC. Is Not Correct\"\n        assert \"Georgia Aquarium, INC.\" in PayingP, \"Georgia Aquarium, INC. is Incorrect\"\n        assert \"Georgia Aquarium, INC.\" == \"Georgia Aquarium, INC.\"\n        Location = self.driver.find_element(By.XPATH, \"//slot[contains(text(),'Georgia Aquarium')]\").text\n        assert Location == \"Georgia Aquarium\", \"Georgia Aquarium Is Not Correct\"\n        assert \"Georgia Aquarium\" in Location, \"Georgia Aquarium is Incorrect\"\n        assert \"Georgia Aquarium\" == \"Georgia Aquarium\"\n>       PriCheckBox = self.driver.find_element(By.XPATH, \"//label[@for='checkbox-1214']//span[@class='slds-checkbox_faux']\")\n\ntestCases\\test_salesCheck.py:101: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:861: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:444: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000017254679910>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...\\t(No symbol) [0x76B77BA9]\\\\n\\\\tRtlInitializeExceptionChain [0x77D3BDAB+107]\\\\n\\\\tRtlClearBits [0x77D3BD2F+191]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = \"{}.{}\".format(frame[\"className\"], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//label[@for='checkbox-1214']//span[@class='slds-checkbox_faux']\"}\nE         (Session info: chrome=128.0.6613.114)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x010B8213+26163]\nE       \t(No symbol) [0x01049CC4]\nE       \t(No symbol) [0x00F424C3]\nE       \t(No symbol) [0x00F87453]\nE       \t(No symbol) [0x00F8762B]\nE       \t(No symbol) [0x00FC6B62]\nE       \t(No symbol) [0x00FAAD04]\nE       \t(No symbol) [0x00FC4661]\nE       \t(No symbol) [0x00FAAA56]\nE       \t(No symbol) [0x00F7BE89]\nE       \t(No symbol) [0x00F7C8CD]\nE       \tGetHandleVerifier [0x0138D313+2996019]\nE       \tGetHandleVerifier [0x013E1B89+3342249]\nE       \tGetHandleVerifier [0x01147AEF+614159]\nE       \tGetHandleVerifier [0x0114F17C+644508]\nE       \t(No symbol) [0x010527FD]\nE       \t(No symbol) [0x0104F6F8]\nE       \t(No symbol) [0x0104F895]\nE       \t(No symbol) [0x01041C16]\nE       \t(No symbol) [0x76B77BA9]\nE       \tRtlInitializeExceptionChain [0x77D3BDAB+107]\nE       \tRtlClearBits [0x77D3BD2F+191]\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:249: NoSuchElementException"}, "attachments": [{"name": "log", "source": "e230143a-c996-4cd0-a035-1377041d707b-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "e7b29e5d-1b8b-4cdb-af90-0def25572d9e-attachment.txt", "type": "text/plain"}], "start": 1725638238398, "stop": 1725638269052, "uuid": "8e621002-f2f5-412e-b48b-ccbf39d157cc", "historyId": "5fee88f8c11c6d1c530a22c8975e4478", "testCaseId": "5fee88f8c11c6d1c530a22c8975e4478", "fullName": "test_salesCheck.Test_SalesCheck#test_salesCheck", "labels": [{"name": "tag", "value": "sales"}, {"name": "suite", "value": "test_salesCheck"}, {"name": "subSuite", "value": "Test_SalesCheck"}, {"name": "host", "value": "OPGLOOJEYINKA"}, {"name": "thread", "value": "7404-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_salesCheck"}]}