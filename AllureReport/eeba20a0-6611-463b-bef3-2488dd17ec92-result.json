{"name": "test_Opportunity", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=131.0.6778.71)\nStacktrace:\n\tGetHandleVerifier [0x010333E3+25059]\n\t(No symbol) [0x00FBCDE4]\n\t(No symbol) [0x00E9BEC3]\n\t(No symbol) [0x00E7D93B]\n\t(No symbol) [0x00F0800F]\n\t(No symbol) [0x00F1AE49]\n\t(No symbol) [0x00F01C96]\n\t(No symbol) [0x00ED3FAC]\n\t(No symbol) [0x00ED4F3D]\n\tGetHandleVerifier [0x01325543+3113795]\n\tGetHandleVerifier [0x0133A20A+3198986]\n\tGetHandleVerifier [0x013329E2+3168226]\n\tGetHandleVerifier [0x010D3250+680016]\n\t(No symbol) [0x00FC572D]\n\t(No symbol) [0x00FC29D8]\n\t(No symbol) [0x00FC2B75]\n\t(No symbol) [0x00FB57D0]\n\t(No symbol) [0x762A7BA9]\n\tRtlInitializeExceptionChain [0x7759BDAB+107]\n\tRtlClearBits [0x7759BD2F+191]", "trace": "self = <testCases.test_salesOpportunity.Test_SalesOpportunity object at 0x0000016628516F50>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"e35a24f2928623388465f0f4a17a1558\")>\n\n    @pytest.mark.sales\n    def test_Opportunity(self, setup):\n        self.logger.info(\"*****Starting The Sales Opportunity Test*****\")\n        # Call the Browser Configuration\n        self.logger.info(\"*****Call the Browser Configuration*****\")\n        self.driver = setup\n        self.driver.implicitly_wait(10)\n        # Open the Website URL\n        self.logger.info(\"*****Open the Website URL*****\")\n>       self.driver.get(self.baseURL)\n\ntestCases\\test_salesOpportunity.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:455: in get\n    self.execute(Command.GET, {\"url\": url})\n..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:444: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000016628512610>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...\\t(No symbol) [0x762A7BA9]\\\\n\\\\tRtlInitializeExceptionChain [0x7759BDAB+107]\\\\n\\\\tRtlClearBits [0x7759BD2F+191]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = \"{}.{}\".format(frame[\"className\"], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=131.0.6778.71)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x010333E3+25059]\nE       \t(No symbol) [0x00FBCDE4]\nE       \t(No symbol) [0x00E9BEC3]\nE       \t(No symbol) [0x00E7D93B]\nE       \t(No symbol) [0x00F0800F]\nE       \t(No symbol) [0x00F1AE49]\nE       \t(No symbol) [0x00F01C96]\nE       \t(No symbol) [0x00ED3FAC]\nE       \t(No symbol) [0x00ED4F3D]\nE       \tGetHandleVerifier [0x01325543+3113795]\nE       \tGetHandleVerifier [0x0133A20A+3198986]\nE       \tGetHandleVerifier [0x013329E2+3168226]\nE       \tGetHandleVerifier [0x010D3250+680016]\nE       \t(No symbol) [0x00FC572D]\nE       \t(No symbol) [0x00FC29D8]\nE       \t(No symbol) [0x00FC2B75]\nE       \t(No symbol) [0x00FB57D0]\nE       \t(No symbol) [0x762A7BA9]\nE       \tRtlInitializeExceptionChain [0x7759BDAB+107]\nE       \tRtlClearBits [0x7759BD2F+191]\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:249: NoSuchWindowException"}, "attachments": [{"name": "log", "source": "b2201e18-a2fa-4a7e-81a4-15f65db99ede-attachment.txt", "type": "text/plain"}], "start": 1732221082722, "stop": 1732221082724, "uuid": "1a6b4d02-d79d-46b1-bb7a-5cc7cc211555", "historyId": "d08e0d5dbdba94461afb41669c70da53", "testCaseId": "d08e0d5dbdba94461afb41669c70da53", "fullName": "test_salesOpportunity.Test_SalesOpportunity#test_Opportunity", "labels": [{"name": "tag", "value": "sales"}, {"name": "suite", "value": "test_salesOpportunity"}, {"name": "subSuite", "value": "Test_SalesOpportunity"}, {"name": "host", "value": "OPGLOOJEYINKA"}, {"name": "thread", "value": "25360-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_salesOpportunity"}]}